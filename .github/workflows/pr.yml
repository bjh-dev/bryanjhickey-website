name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

env:
  NODE_VERSION: "20"
  BUN_VERSION: "latest"

jobs:
  # Job 1: PR Analysis & Validation
  pr-checks:
    name: PR Analysis & Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Sanity types
        run: bun run sanity:typegen
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}

      - name: Run linting with reporting
        run: bun run lint --format=compact --output-file=eslint-report.txt
        continue-on-error: true

      - name: Run type checking with detailed output
        run: bun run typecheck > typecheck-report.txt 2>&1
        continue-on-error: true

      - name: Run tests with verbose output
        run: bun run test:run --reporter=verbose > test-report.txt 2>&1
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: test-project
          NEXT_PUBLIC_SANITY_DATASET: test
          NEXT_PUBLIC_SANITY_API_VERSION: 2024-01-01
          NEXT_PUBLIC_SITE_URL: http://localhost:3000
          SANITY_API_READ_TOKEN: test-token
        continue-on-error: true

      - name: Build check
        run: bun run built > build-report.txt 2>&1
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          SANITY_API_READ_TOKEN: ${{ secrets.SANITY_API_READ_TOKEN }}
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');

            let comment = '## üîç PR Analysis Results\n\n';

            // Check if reports exist and read them
            try {
              const eslintReport = fs.readFileSync('eslint-report.txt', 'utf8');
              comment += '### üìù ESLint Results\n';
              comment += eslintReport.length > 0 ? `\`\`\`\n${eslintReport}\n\`\`\`` : '‚úÖ No linting issues found\n';
              comment += '\n\n';
            } catch (e) {
              comment += '### üìù ESLint Results\n‚úÖ No linting issues found\n\n';
            }

            try {
              const typecheckReport = fs.readFileSync('typecheck-report.txt', 'utf8');
              comment += '### üîß TypeScript Results\n';
              comment += typecheckReport.length > 0 ? `\`\`\`\n${typecheckReport}\n\`\`\`` : '‚úÖ No type errors found\n';
              comment += '\n\n';
            } catch (e) {
              comment += '### üîß TypeScript Results\n‚úÖ No type errors found\n\n';
            }

            try {
              const testReport = fs.readFileSync('test-report.txt', 'utf8');
              comment += '### üß™ Test Results\n';
              comment += testReport.includes('‚úì') ? '‚úÖ All tests passing\n' : `\`\`\`\n${testReport}\n\`\`\``;
              comment += '\n\n';
            } catch (e) {
              comment += '### üß™ Test Results\n‚ùå Tests failed to run\n\n';
            }

            try {
              const buildReport = fs.readFileSync('build-report.txt', 'utf8');
              comment += '### üèóÔ∏è Build Results\n';
              comment += buildReport.includes('‚úì') || buildReport.includes('success') ? '‚úÖ Build successful\n' : `\`\`\`\n${buildReport}\n\`\`\``;
              comment += '\n\n';
            } catch (e) {
              comment += '### üèóÔ∏è Build Results\n‚ùå Build failed\n\n';
            }

            comment += '---\n*This comment was generated automatically by the CI/CD pipeline*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 2: Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Sanity types
        run: bun run sanity:typegen
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}

      - name: Run accessibility tests
        run: bun run test:run
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: test-project
          NEXT_PUBLIC_SANITY_DATASET: test
          NEXT_PUBLIC_SANITY_API_VERSION: 2024-01-01
          NEXT_PUBLIC_SITE_URL: http://localhost:3000
          SANITY_API_READ_TOKEN: test-token

      - name: Comment accessibility results
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Accessibility tests failed!** Please check the accessibility compliance of your components before merging.'
            });

  # Job 3: Bundle Size Analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Sanity types
        run: bun run sanity:typegen
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}

      - name: Build and analyze bundle
        run: |
          bun run built
          npx @next/bundle-analyzer || echo "Bundle analyzer not available"
        env:
          ANALYZE: true
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          SANITY_API_READ_TOKEN: ${{ secrets.SANITY_API_READ_TOKEN }}

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: .next/analyze/
        continue-on-error: true
