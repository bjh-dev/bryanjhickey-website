name: Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  BUN_VERSION: 'latest'

jobs:
  # Job 1: Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      release-tag: ${{ steps.get-version.outputs.version }}
      release-notes: ${{ steps.generate-notes.outputs.notes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: generate-notes
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating release notes since $PREVIOUS_TAG"
            
            # Generate changelog
            echo "## üìù Changes" > release-notes.md
            echo "" >> release-notes.md
            
            # Get commits since last tag
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse >> release-notes.md
            echo "" >> release-notes.md
            echo "" >> release-notes.md
            
            # Add contributors
            echo "## üë• Contributors" >> release-notes.md
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- @%an" | sort -u >> release-notes.md
            echo "" >> release-notes.md
            
            # Add technical details
            echo "## üîß Technical Details" >> release-notes.md
            echo "- **Commits**: $(git rev-list --count $PREVIOUS_TAG..HEAD)" >> release-notes.md
            echo "- **Files Changed**: $(git diff --name-only $PREVIOUS_TAG..HEAD | wc -l)" >> release-notes.md
            echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
          else
            echo "## üéâ Initial Release" > release-notes.md
            echo "" >> release-notes.md
            echo "This is the first release of bryanjhickey.com!" >> release-notes.md
          fi
          
          # Set multiline output
          {
            echo 'notes<<EOF'
            cat release-notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Sanity types
        run: bun run sanity:typegen
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}

      - name: Run full test suite
        run: bun run test:run
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: test-project
          NEXT_PUBLIC_SANITY_DATASET: test
          NEXT_PUBLIC_SANITY_API_VERSION: 2024-01-01
          NEXT_PUBLIC_SITE_URL: http://localhost:3000
          SANITY_API_READ_TOKEN: test-token

      - name: Build production bundle
        run: bun run built
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          SANITY_API_READ_TOKEN: ${{ secrets.SANITY_API_READ_TOKEN }}
          NODE_ENV: production

      - name: Create release archive
        run: |
          # Create release archive excluding unnecessary files
          tar -czf bryanjhickey-${{ steps.get-version.outputs.version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.next/cache \
            --exclude=.git \
            --exclude="*.log" \
            .

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          body: ${{ steps.generate-notes.outputs.notes }}
          draft: false
          prerelease: ${{ contains(steps.get-version.outputs.version, '-') }}

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bryanjhickey-${{ steps.get-version.outputs.version }}.tar.gz
          asset_name: bryanjhickey-${{ steps.get-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Job 2: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: create-release
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Sanity types
        run: bun run sanity:typegen
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}

      - name: Build for production
        run: bun run built
        env:
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          SANITY_API_READ_TOKEN: ${{ secrets.SANITY_API_READ_TOKEN }}
          NODE_ENV: production

      # Add your deployment steps here based on your hosting platform
      # Examples:
      
      # For Vercel:
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v25
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
      #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
      #     vercel-args: '--prod'
      
      # For Netlify:
      # - name: Deploy to Netlify
      #   uses: nwtgck/actions-netlify@v3.0
      #   with:
      #     publish-dir: '.next'
      #     production-branch: main
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions - ${{ needs.create-release.outputs.release-tag }}"
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      
      # For custom server deployment:
      # - name: Deploy to server
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.KEY }}
      #     script: |
      #       cd /path/to/your/app
      #       git pull origin main
      #       bun install --frozen-lockfile
      #       bun run built
      #       pm2 restart bryanjhickey

      - name: Deployment placeholder
        run: |
          echo "üöÄ Ready to deploy ${{ needs.create-release.outputs.release-tag }}"
          echo "Add your deployment steps in the deploy-production job"
          echo "Supported platforms: Vercel, Netlify, Custom Server, AWS, etc."

      - name: Notify deployment success
        run: |
          echo "‚úÖ Release ${{ needs.create-release.outputs.release-tag }} deployed successfully!"
          
  # Job 3: Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: Health check
        run: |
          # Add health check for your deployed application
          # Example:
          # curl -f ${{ secrets.NEXT_PUBLIC_SITE_URL }}/api/health || exit 1
          echo "üîç Running deployment validation..."
          echo "Add health checks for your deployed application"

      - name: Performance check
        run: |
          # Add performance checks
          # Example using Lighthouse CI:
          # npm install -g @lhci/cli
          # lhci autorun
          echo "‚ö° Performance validation placeholder"

      - name: Notify team
        if: success()
        run: |
          echo "üéâ Release ${{ needs.create-release.outputs.release-tag }} is live!"
          echo "All validation checks passed successfully"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment validation failed"
          echo "Consider implementing automatic rollback here"