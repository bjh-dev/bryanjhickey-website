/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Twitter = {
  _type: "twitter";
  cardType?: string;
  creator?: string;
  site?: string;
  handle?: string;
};

export type OpenGraph = {
  _type: "openGraph";
  url?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  title?: string;
  description?: string;
  siteName?: string;
};

export type MetaTag = {
  _type: "metaTag";
  metaAttributes?: Array<{
    _key: string;
  } & MetaAttribute>;
};

export type MetaAttribute = {
  _type: "metaAttribute";
  attributeKey?: string;
  attributeType?: "string" | "image";
  attributeValueImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  attributeValueString?: string;
};

export type MenuItem = {
  _type: "menuItem";
  text?: string;
  type?: "link" | "child-menu";
  link?: Link;
  childMenu?: Array<{
    _key: string;
  } & MenuItem>;
};

export type Menu = {
  _type: "menu";
  menuItems?: Array<{
    _key: string;
  } & MenuItem>;
};

export type Social = {
  _type: "social";
  platform?: "facebook" | "instagram" | "linkedin" | "twitter" | "youtube";
  url?: string;
};

export type Button = {
  _type: "button";
  variant?: "default" | "secondary" | "outline" | "link";
  text?: string;
  link?: Link;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "lead" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    customLink?: Link;
    _type: "customLink";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Hero = {
  _type: "hero";
  title?: string;
  subtitle?: string;
  content?: BlockContent;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  buttons?: Array<{
    _key: string;
  } & Button>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  pageSections?: Array<{
    _key: string;
  } & Hero>;
  seo?: SeoMetaFields;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  content?: BlockContent;
  excerpt?: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
  seo?: SeoMetaFields;
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  role?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  menu?: Array<{
    _key: string;
  } & MenuItem>;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
  footerMenu?: Array<{
    _key: string;
  } & MenuItem>;
  socials?: Array<{
    _key: string;
  } & Social>;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  pageSections?: Array<{
    _key: string;
  } & Hero>;
  seo?: SeoMetaFields;
};

export type SeoMetaFields = {
  _type: "seoMetaFields";
  noIndex?: boolean;
  metaTitle?: string;
  metaDescription?: string;
  metaImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoKeywords?: Array<string>;
  openGraph?: OpenGraph;
  additionalMetaTags?: Array<{
    _key: string;
  } & MetaTag>;
  twitter?: Twitter;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Link = {
  _type: "link";
  type?: "internal" | "external";
  openInNewTab?: boolean;
  external?: string;
  href?: string;
  internal?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Twitter | OpenGraph | MetaTag | MetaAttribute | MenuItem | Menu | Social | Button | BlockContent | Hero | Page | Post | Person | Category | Settings | HomePage | SeoMetaFields | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Link | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity/queries/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{  title,  description,    menu[]{      _type,  _key,  text,  type,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },    childMenu[]{        _type,  _key,  text,  type,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },    }  },  footerMenu[]{      _type,  _key,  text,  type,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },    childMenu[]{        _type,  _key,  text,  type,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },    },  },  socials[]{    _key,    platform,    url,  }[],}
export type SettingsQueryResult = {
  title: string | null;
  description: string | null;
  menu: Array<{
    _type: "menuItem";
    _key: string;
    text: string | null;
    type: "child-menu" | "link" | null;
    link: {
      _type: "link";
      type: "external" | "internal" | null;
      openInNewTab: boolean | null;
      external: string | null;
      href: string | null;
      internal: {
        _id: string;
        _type: "page";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        slug?: Slug;
        pageSections?: Array<{
          _key: string;
        } & Hero>;
        seo?: SeoMetaFields;
      } | {
        _id: string;
        _type: "post";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title?: string;
        slug?: Slug;
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        content?: BlockContent;
        excerpt?: string;
        categories?: Array<{
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: "category";
        }>;
        date?: string;
        author?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "person";
        };
        seo?: SeoMetaFields;
      } | null;
    } | null;
    childMenu: Array<{
      _type: "menuItem";
      _key: string;
      text: string | null;
      type: "child-menu" | "link" | null;
      link: {
        _type: "link";
        type: "external" | "internal" | null;
        openInNewTab: boolean | null;
        external: string | null;
        href: string | null;
        internal: {
          _id: string;
          _type: "page";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          name?: string;
          slug?: Slug;
          pageSections?: Array<{
            _key: string;
          } & Hero>;
          seo?: SeoMetaFields;
        } | {
          _id: string;
          _type: "post";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title?: string;
          slug?: Slug;
          image?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
          content?: BlockContent;
          excerpt?: string;
          categories?: Array<{
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            _key: string;
            [internalGroqTypeReferenceTo]?: "category";
          }>;
          date?: string;
          author?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "person";
          };
          seo?: SeoMetaFields;
        } | null;
      } | null;
    }> | null;
  }> | null;
  footerMenu: Array<{
    _type: "menuItem";
    _key: string;
    text: string | null;
    type: "child-menu" | "link" | null;
    link: {
      _type: "link";
      type: "external" | "internal" | null;
      openInNewTab: boolean | null;
      external: string | null;
      href: string | null;
      internal: {
        _id: string;
        _type: "page";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        slug?: Slug;
        pageSections?: Array<{
          _key: string;
        } & Hero>;
        seo?: SeoMetaFields;
      } | {
        _id: string;
        _type: "post";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title?: string;
        slug?: Slug;
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        content?: BlockContent;
        excerpt?: string;
        categories?: Array<{
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: "category";
        }>;
        date?: string;
        author?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "person";
        };
        seo?: SeoMetaFields;
      } | null;
    } | null;
    childMenu: Array<{
      _type: "menuItem";
      _key: string;
      text: string | null;
      type: "child-menu" | "link" | null;
      link: {
        _type: "link";
        type: "external" | "internal" | null;
        openInNewTab: boolean | null;
        external: string | null;
        href: string | null;
        internal: {
          _id: string;
          _type: "page";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          name?: string;
          slug?: Slug;
          pageSections?: Array<{
            _key: string;
          } & Hero>;
          seo?: SeoMetaFields;
        } | {
          _id: string;
          _type: "post";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title?: string;
          slug?: Slug;
          image?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
          content?: BlockContent;
          excerpt?: string;
          categories?: Array<{
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            _key: string;
            [internalGroqTypeReferenceTo]?: "category";
          }>;
          date?: string;
          author?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "person";
          };
          seo?: SeoMetaFields;
        } | null;
      } | null;
    }> | null;
  }> | null;
  socials: Array<{
    _key: string;
    platform: "facebook" | "instagram" | "linkedin" | "twitter" | "youtube" | null;
    url: string | null;
  }> | null;
} | null;
// Variable: homePageQuery
// Query: *[_type == "homePage"][0]{  _id,  _type,  ...,      pageSections[]{    ...,    _key,    _type,    _type == 'cardGrid' => {    _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  icon,  cards[]{      _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  icon,  },},    _type == 'cta' => {  _type,  heading,  text,    buttons[]{      _key,  _type,  variant,  text,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },},    _type == 'divider' => {  _type,  height},    _type == 'hero' => {  _type,  text,  subheading,    _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },},    _type == 'mediaText' => {  _type,  heading,  text,  media,  mediaPosition,    buttons[]{      _key,  _type,  variant,  text,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },},    _type == 'postList' => {    _type,    heading,    numberOfPosts,    "posts": *[_type == 'post'] | order(_createdAt desc, _id desc) [0...20] {          _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{  _id,  _type,  title,  "slug": slug.current,  description,},  "date": coalesce(date, _updatedAt),  "author": author->{  _id,  _type,  firstName,  lastName,  image,  role,  biography,  "slug": slug.current,},  "wordCount": count(string::split(coalesce(pt::text(content), ''), " ")),  "slug": slug.current,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  seo {      _type,  metaTitle,  noIndex,  seoKeywords,  metaDescription,  metaImage{      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  additionalMetaTags[]{      _key,  _type,  metaAttributes[] {      _type,  attributeValueString,  attributeType,  attributeKey,  attributeValueImage {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  },  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  twitter {      _type,  site,  creator,  cardType,  handle,  }  },    }},    _type == 'subscribe' => {  _type,  heading,  text}  },  seo {      _type,  metaTitle,  noIndex,  seoKeywords,  metaDescription,  metaImage{      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  additionalMetaTags[]{      _key,  _type,  metaAttributes[] {      _type,  attributeValueString,  attributeType,  attributeKey,  attributeValueImage {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  },  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  twitter {      _type,  site,  creator,  cardType,  handle,  }  },}
export type HomePageQueryResult = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  pageSections: Array<{
    _key: string;
    _type: "hero";
    title?: string;
    subtitle?: string;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "lead" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        customLink?: Link;
        _type: "customLink";
        _key: string;
      } | {
        customLink?: Link;
        _type: "link";
        _key: string;
        type: "external" | "internal" | null;
        openInNewTab: boolean | null;
        external: string | null;
        href: string | null;
        internal: {
          _id: string;
          _type: "page";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          name?: string;
          slug?: Slug;
          pageSections?: Array<{
            _key: string;
          } & Hero>;
          seo?: SeoMetaFields;
        } | {
          _id: string;
          _type: "post";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title?: string;
          slug?: Slug;
          image?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
          content?: BlockContent;
          excerpt?: string;
          categories?: Array<{
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            _key: string;
            [internalGroqTypeReferenceTo]?: "category";
          }>;
          date?: string;
          author?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "person";
          };
          seo?: SeoMetaFields;
        } | null;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    }> | null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    buttons?: Array<{
      _key: string;
    } & Button>;
    text: null;
    subheading: null;
    crop: null;
    hotspot: null;
    asset: null;
  }> | null;
  seo: {
    _type: "seoMetaFields";
    metaTitle: string | null;
    noIndex: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    metaImage: {
      _type: "image";
      crop: {
        _type: "sanity.imageCrop";
        right: number | null;
        top: number | null;
        left: number | null;
        bottom: number | null;
      } | null;
      hotspot: {
        _type: "sanity.imageHotspot";
        x: number | null;
        y: number | null;
        height: number | null;
        width: number | null;
      } | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    additionalMetaTags: Array<{
      _key: string;
      _type: "metaTag";
      metaAttributes: Array<{
        _type: "metaAttribute";
        attributeValueString: string | null;
        attributeType: "image" | "string" | null;
        attributeKey: string | null;
        attributeValueImage: {
          _type: "image";
          crop: {
            _type: "sanity.imageCrop";
            right: number | null;
            top: number | null;
            left: number | null;
            bottom: number | null;
          } | null;
          hotspot: {
            _type: "sanity.imageHotspot";
            x: number | null;
            y: number | null;
            height: number | null;
            width: number | null;
          } | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      }> | null;
    }> | null;
    openGraph: {
      _type: "openGraph";
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: "image";
        crop: {
          _type: "sanity.imageCrop";
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: "sanity.imageHotspot";
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
    twitter: {
      _type: "twitter";
      site: string | null;
      creator: string | null;
      cardType: string | null;
      handle: string | null;
    } | null;
  } | null;
} | null;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,        pageSections[]{    ...,    _key,    _type,    _type == 'cardGrid' => {    _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  icon,  cards[]{      _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  icon,  },},    _type == 'cta' => {  _type,  heading,  text,    buttons[]{      _key,  _type,  variant,  text,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },},    _type == 'divider' => {  _type,  height},    _type == 'hero' => {  _type,  text,  subheading,    _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },},    _type == 'mediaText' => {  _type,  heading,  text,  media,  mediaPosition,    buttons[]{      _key,  _type,  variant,  text,  link {      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },},    _type == 'postList' => {    _type,    heading,    numberOfPosts,    "posts": *[_type == 'post'] | order(_createdAt desc, _id desc) [0...20] {          _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{  _id,  _type,  title,  "slug": slug.current,  description,},  "date": coalesce(date, _updatedAt),  "author": author->{  _id,  _type,  firstName,  lastName,  image,  role,  biography,  "slug": slug.current,},  "wordCount": count(string::split(coalesce(pt::text(content), ''), " ")),  "slug": slug.current,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  seo {      _type,  metaTitle,  noIndex,  seoKeywords,  metaDescription,  metaImage{      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  additionalMetaTags[]{      _key,  _type,  metaAttributes[] {      _type,  attributeValueString,  attributeType,  attributeKey,  attributeValueImage {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  },  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  twitter {      _type,  site,  creator,  cardType,  handle,  }  },    }},    _type == 'subscribe' => {  _type,  heading,  text}  },  seo {      _type,  metaTitle,  noIndex,  seoKeywords,  metaDescription,  metaImage{      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  additionalMetaTags[]{      _key,  _type,  metaAttributes[] {      _type,  attributeValueString,  attributeType,  attributeKey,  attributeValueImage {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  },  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  twitter {      _type,  site,  creator,  cardType,  handle,  }  },  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  name: string | null;
  slug: Slug | null;
  pageSections: Array<{
    _key: string;
    _type: "hero";
    title?: string;
    subtitle?: string;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "lead" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        customLink?: Link;
        _type: "customLink";
        _key: string;
      } | {
        customLink?: Link;
        _type: "link";
        _key: string;
        type: "external" | "internal" | null;
        openInNewTab: boolean | null;
        external: string | null;
        href: string | null;
        internal: {
          _id: string;
          _type: "page";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          name?: string;
          slug?: Slug;
          pageSections?: Array<{
            _key: string;
          } & Hero>;
          seo?: SeoMetaFields;
        } | {
          _id: string;
          _type: "post";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title?: string;
          slug?: Slug;
          image?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
          };
          content?: BlockContent;
          excerpt?: string;
          categories?: Array<{
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            _key: string;
            [internalGroqTypeReferenceTo]?: "category";
          }>;
          date?: string;
          author?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "person";
          };
          seo?: SeoMetaFields;
        } | null;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    }> | null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    buttons?: Array<{
      _key: string;
    } & Button>;
    text: null;
    subheading: null;
    crop: null;
    hotspot: null;
    asset: null;
  }> | null;
  seo: {
    _type: "seoMetaFields";
    metaTitle: string | null;
    noIndex: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    metaImage: {
      _type: "image";
      crop: {
        _type: "sanity.imageCrop";
        right: number | null;
        top: number | null;
        left: number | null;
        bottom: number | null;
      } | null;
      hotspot: {
        _type: "sanity.imageHotspot";
        x: number | null;
        y: number | null;
        height: number | null;
        width: number | null;
      } | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    additionalMetaTags: Array<{
      _key: string;
      _type: "metaTag";
      metaAttributes: Array<{
        _type: "metaAttribute";
        attributeValueString: string | null;
        attributeType: "image" | "string" | null;
        attributeKey: string | null;
        attributeValueImage: {
          _type: "image";
          crop: {
            _type: "sanity.imageCrop";
            right: number | null;
            top: number | null;
            left: number | null;
            bottom: number | null;
          } | null;
          hotspot: {
            _type: "sanity.imageHotspot";
            x: number | null;
            y: number | null;
            height: number | null;
            width: number | null;
          } | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      }> | null;
    }> | null;
    openGraph: {
      _type: "openGraph";
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: "image";
        crop: {
          _type: "sanity.imageCrop";
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: "sanity.imageHotspot";
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
    twitter: {
      _type: "twitter";
      site: string | null;
      creator: string | null;
      cardType: string | null;
      handle: string | null;
    } | null;
  } | null;
} | null;
// Variable: getSitemapQuery
// Query: *[((_type in ["page", "post"] && defined(slug.current)) || (_type == "homePage")) && seo.noIndex != true]{    "href": select(      _type == "page" => "/" + slug.current,      _type == "post" => "/posts/" + slug.current,      _type == "homePage" => "/",      slug.current    ),    _updatedAt  }
export type GetSitemapQueryResult = Array<{
  href: "/";
  _updatedAt: string;
} | {
  href: string | null;
  _updatedAt: string;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {        _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{  _id,  _type,  title,  "slug": slug.current,  description,},  "date": coalesce(date, _updatedAt),  "author": author->{  _id,  _type,  firstName,  lastName,  image,  role,  biography,  "slug": slug.current,},  "wordCount": count(string::split(coalesce(pt::text(content), ''), " ")),  "slug": slug.current,    content[]{    ...,      markDefs[]{    ...,      ...customLink{      _type,  type,  openInNewTab,  external,  href,  internal->{    ...,    _type,    _id,  },  },  },  },  seo {      _type,  metaTitle,  noIndex,  seoKeywords,  metaDescription,  metaImage{      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  additionalMetaTags[]{      _key,  _type,  metaAttributes[] {      _type,  attributeValueString,  attributeType,  attributeKey,  attributeValueImage {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  },  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...},  },  },  twitter {      _type,  site,  creator,  cardType,  handle,  }  },    "slug": slug.current  }
export type PostQueryResult = {
  _type: "post";
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    _type: "category";
    title: string | null;
    slug: string | null;
    description: string | null;
  }> | null;
  date: string;
  author: {
    _id: string;
    _type: "person";
    firstName: string | null;
    lastName: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    role: string | null;
    biography: null;
    slug: string | null;
  } | null;
  wordCount: number;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "lead" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      customLink?: Link;
      _type: "customLink";
      _key: string;
    } | {
      customLink?: Link;
      _type: "link";
      _key: string;
      type: "external" | "internal" | null;
      openInNewTab: boolean | null;
      external: string | null;
      href: string | null;
      internal: {
        _id: string;
        _type: "page";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        slug?: Slug;
        pageSections?: Array<{
          _key: string;
        } & Hero>;
        seo?: SeoMetaFields;
      } | {
        _id: string;
        _type: "post";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title?: string;
        slug?: Slug;
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        content?: BlockContent;
        excerpt?: string;
        categories?: Array<{
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: "category";
        }>;
        date?: string;
        author?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "person";
        };
        seo?: SeoMetaFields;
      } | null;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
    markDefs: null;
  }> | null;
  seo: {
    _type: "seoMetaFields";
    metaTitle: string | null;
    noIndex: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    metaImage: {
      _type: "image";
      crop: {
        _type: "sanity.imageCrop";
        right: number | null;
        top: number | null;
        left: number | null;
        bottom: number | null;
      } | null;
      hotspot: {
        _type: "sanity.imageHotspot";
        x: number | null;
        y: number | null;
        height: number | null;
        width: number | null;
      } | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    additionalMetaTags: Array<{
      _key: string;
      _type: "metaTag";
      metaAttributes: Array<{
        _type: "metaAttribute";
        attributeValueString: string | null;
        attributeType: "image" | "string" | null;
        attributeKey: string | null;
        attributeValueImage: {
          _type: "image";
          crop: {
            _type: "sanity.imageCrop";
            right: number | null;
            top: number | null;
            left: number | null;
            bottom: number | null;
          } | null;
          hotspot: {
            _type: "sanity.imageHotspot";
            x: number | null;
            y: number | null;
            height: number | null;
            width: number | null;
          } | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      }> | null;
    }> | null;
    openGraph: {
      _type: "openGraph";
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: "image";
        crop: {
          _type: "sanity.imageCrop";
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: "sanity.imageHotspot";
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
    twitter: {
      _type: "twitter";
      site: string | null;
      creator: string | null;
      cardType: string | null;
      handle: string | null;
    } | null;
  } | null;
} | null;
// Variable: categoryQuery
// Query: *[_type == "category" && slug.current == $slug] [0] {      _id,  _type,  title,  "slug": slug.current,  description,  }
export type CategoryQueryResult = {
  _id: string;
  _type: "category";
  title: string | null;
  slug: string | null;
  description: string | null;
} | null;
// Variable: personQuery
// Query: *[_type == "person" && slug.current == $slug] [0] {      _id,  _type,  firstName,  lastName,  image,  role,  biography,  "slug": slug.current,  }
export type PersonQueryResult = {
  _id: string;
  _type: "person";
  firstName: string | null;
  lastName: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  role: string | null;
  biography: null;
  slug: string | null;
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)][0..$limit].slug.current
export type PostPagesSlugsResult = Array<string | null>;
// Variable: categorySlugs
// Query: *[_type == "category" && defined(slug.current)][0..$limit].slug.current
export type CategorySlugsResult = Array<string | null>;
// Variable: personSlugs
// Query: *[_type == "person" && defined(slug.current)][0..$limit].slug.current
export type PersonSlugsResult = Array<string | null>;
// Variable: postsArchiveQuery
// Query: {    "allResults": *[      _type == "post"      &&      (        !defined( $filters.categorySlug ) || references(*[_type == "category" && slug.current == $filters.categorySlug]._id)      )      &&      (        !defined( $filters.personSlug ) || references(*[_type == "person" && slug.current == $filters.personSlug]._id)      )      //      // Add more filter here if needed      //      // The filter value should be passed as a property of the $filter parameter      //      // (      //   !defined( $filters.anotherFilter ) || fieldname == $filters.anotherFilter)      // )    ] | order(_createdAt desc, _id desc)  }  {    "total": count(allResults),    "results": allResults[$from..$to] {        _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{  _id,  _type,  title,  "slug": slug.current,  description,},  "date": coalesce(date, _updatedAt),  "author": author->{  _id,  _type,  firstName,  lastName,  image,  role,  biography,  "slug": slug.current,},  "wordCount": count(string::split(coalesce(pt::text(content), ''), " ")),    }  }
export type PostsArchiveQueryResult = {
  total: number;
  results: Array<{
    _type: "post";
    _id: string;
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    categories: Array<{
      _id: string;
      _type: "category";
      title: string | null;
      slug: string | null;
      description: string | null;
    }> | null;
    date: string;
    author: {
      _id: string;
      _type: "person";
      firstName: string | null;
      lastName: string | null;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      role: string | null;
      biography: null;
      slug: string | null;
    } | null;
    wordCount: number;
  }>;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]{\n  title,\n  description,\n  \n  menu[]{\n    \n  _type,\n  _key,\n  text,\n  type,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n    childMenu[]{\n      \n  _type,\n  _key,\n  text,\n  type,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n    }\n  }\n,\n  footerMenu[]{\n    \n  _type,\n  _key,\n  text,\n  type,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n    childMenu[]{\n      \n  _type,\n  _key,\n  text,\n  type,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n    },\n  },\n  socials[]{\n    _key,\n    platform,\n    url,\n  }[],\n}": SettingsQueryResult;
    "*[_type == \"homePage\"][0]{\n  _id,\n  _type,\n  ...,\n  \n  \n  pageSections[]{\n    ...,\n    _key,\n    _type,\n    _type == 'cardGrid' => {\n  \n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  icon,\n\n  cards[]{\n    \n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  icon,\n\n  },\n},\n    _type == 'cta' => {\n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    \n  _key,\n  _type,\n  variant,\n  text,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n},\n    _type == 'divider' => {\n  _type,\n  height\n},\n    _type == 'hero' => {\n  _type,\n  text,\n  subheading,\n  \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n},\n    _type == 'mediaText' => {\n  _type,\n  heading,\n  text,\n  media,\n  mediaPosition,\n  \n  buttons[]{\n    \n  _key,\n  _type,\n  variant,\n  text,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n},\n    _type == 'postList' => {\n    _type,\n    heading,\n    numberOfPosts,\n    \"posts\": *[_type == 'post'] | order(_createdAt desc, _id desc) [0...20] {\n      \n  \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  image,\n  \"categories\": categories[]->{\n  _id,\n  _type,\n  title,\n  \"slug\": slug.current,\n  description,\n},\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n  _id,\n  _type,\n  firstName,\n  lastName,\n  image,\n  role,\n  biography,\n  \"slug\": slug.current,\n},\n  \"wordCount\": count(string::split(coalesce(pt::text(content), ''), \" \")),\n\n  \"slug\": slug.current,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  seo {\n    \n  _type,\n  metaTitle,\n  noIndex,\n  seoKeywords,\n  metaDescription,\n  metaImage{\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n  additionalMetaTags[]{\n    \n  _key,\n  _type,\n  metaAttributes[] {\n    \n  _type,\n  attributeValueString,\n  attributeType,\n  attributeKey,\n  attributeValueImage {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n\n  },\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n  twitter {\n    \n  _type,\n  site,\n  creator,\n  cardType,\n  handle,\n\n  }\n\n  },\n\n    }\n},\n    _type == 'subscribe' => {\n  _type,\n  heading,\n  text\n}\n  },\n\n  seo {\n    \n  _type,\n  metaTitle,\n  noIndex,\n  seoKeywords,\n  metaDescription,\n  metaImage{\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n  additionalMetaTags[]{\n    \n  _key,\n  _type,\n  metaAttributes[] {\n    \n  _type,\n  attributeValueString,\n  attributeType,\n  attributeKey,\n  attributeValueImage {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n\n  },\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n  twitter {\n    \n  _type,\n  site,\n  creator,\n  cardType,\n  handle,\n\n  }\n\n  },\n\n}": HomePageQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    \n  \n  pageSections[]{\n    ...,\n    _key,\n    _type,\n    _type == 'cardGrid' => {\n  \n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  icon,\n\n  cards[]{\n    \n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  icon,\n\n  },\n},\n    _type == 'cta' => {\n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    \n  _key,\n  _type,\n  variant,\n  text,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n},\n    _type == 'divider' => {\n  _type,\n  height\n},\n    _type == 'hero' => {\n  _type,\n  text,\n  subheading,\n  \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n},\n    _type == 'mediaText' => {\n  _type,\n  heading,\n  text,\n  media,\n  mediaPosition,\n  \n  buttons[]{\n    \n  _key,\n  _type,\n  variant,\n  text,\n  link {\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n},\n    _type == 'postList' => {\n    _type,\n    heading,\n    numberOfPosts,\n    \"posts\": *[_type == 'post'] | order(_createdAt desc, _id desc) [0...20] {\n      \n  \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  image,\n  \"categories\": categories[]->{\n  _id,\n  _type,\n  title,\n  \"slug\": slug.current,\n  description,\n},\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n  _id,\n  _type,\n  firstName,\n  lastName,\n  image,\n  role,\n  biography,\n  \"slug\": slug.current,\n},\n  \"wordCount\": count(string::split(coalesce(pt::text(content), ''), \" \")),\n\n  \"slug\": slug.current,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  seo {\n    \n  _type,\n  metaTitle,\n  noIndex,\n  seoKeywords,\n  metaDescription,\n  metaImage{\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n  additionalMetaTags[]{\n    \n  _key,\n  _type,\n  metaAttributes[] {\n    \n  _type,\n  attributeValueString,\n  attributeType,\n  attributeKey,\n  attributeValueImage {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n\n  },\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n  twitter {\n    \n  _type,\n  site,\n  creator,\n  cardType,\n  handle,\n\n  }\n\n  },\n\n    }\n},\n    _type == 'subscribe' => {\n  _type,\n  heading,\n  text\n}\n  },\n\n  seo {\n    \n  _type,\n  metaTitle,\n  noIndex,\n  seoKeywords,\n  metaDescription,\n  metaImage{\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n  additionalMetaTags[]{\n    \n  _key,\n  _type,\n  metaAttributes[] {\n    \n  _type,\n  attributeValueString,\n  attributeType,\n  attributeKey,\n  attributeValueImage {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n\n  },\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n  twitter {\n    \n  _type,\n  site,\n  creator,\n  cardType,\n  handle,\n\n  }\n\n  },\n\n  }\n": GetPageQueryResult;
    "\n  *[((_type in [\"page\", \"post\"] && defined(slug.current)) || (_type == \"homePage\")) && seo.noIndex != true]{\n    \"href\": select(\n      _type == \"page\" => \"/\" + slug.current,\n      _type == \"post\" => \"/posts/\" + slug.current,\n      _type == \"homePage\" => \"/\",\n      slug.current\n    ),\n    _updatedAt\n  }\n": GetSitemapQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    \n  \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  image,\n  \"categories\": categories[]->{\n  _id,\n  _type,\n  title,\n  \"slug\": slug.current,\n  description,\n},\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n  _id,\n  _type,\n  firstName,\n  lastName,\n  image,\n  role,\n  biography,\n  \"slug\": slug.current,\n},\n  \"wordCount\": count(string::split(coalesce(pt::text(content), ''), \" \")),\n\n  \"slug\": slug.current,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    \n  _type,\n  type,\n  openInNewTab,\n  external,\n  href,\n  internal->{\n    ...,\n    _type,\n    _id,\n  },\n\n  },\n\n  },\n\n  },\n\n  seo {\n    \n  _type,\n  metaTitle,\n  noIndex,\n  seoKeywords,\n  metaDescription,\n  metaImage{\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n  additionalMetaTags[]{\n    \n  _key,\n  _type,\n  metaAttributes[] {\n    \n  _type,\n  attributeValueString,\n  attributeType,\n  attributeKey,\n  attributeValueImage {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n\n  },\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...},\n\n  },\n\n  },\n  twitter {\n    \n  _type,\n  site,\n  creator,\n  cardType,\n  handle,\n\n  }\n\n  },\n\n    \"slug\": slug.current\n  }\n": PostQueryResult;
    "\n  *[_type == \"category\" && slug.current == $slug] [0] {\n    \n  _id,\n  _type,\n  title,\n  \"slug\": slug.current,\n  description,\n\n  }\n": CategoryQueryResult;
    "\n  *[_type == \"person\" && slug.current == $slug] [0] {\n    \n  _id,\n  _type,\n  firstName,\n  lastName,\n  image,\n  role,\n  biography,\n  \"slug\": slug.current,\n\n  }\n": PersonQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)][0..$limit].slug.current\n": PostPagesSlugsResult;
    "\n  *[_type == \"category\" && defined(slug.current)][0..$limit].slug.current\n": CategorySlugsResult;
    "\n  *[_type == \"person\" && defined(slug.current)][0..$limit].slug.current\n": PersonSlugsResult;
    "\n  {\n    \"allResults\": *[\n      _type == \"post\"\n      &&\n      (\n        !defined( $filters.categorySlug ) || references(*[_type == \"category\" && slug.current == $filters.categorySlug]._id)\n      )\n      &&\n      (\n        !defined( $filters.personSlug ) || references(*[_type == \"person\" && slug.current == $filters.personSlug]._id)\n      )\n      //\n      // Add more filter here if needed\n      //\n      // The filter value should be passed as a property of the $filter parameter\n      //\n      // (\n      //   !defined( $filters.anotherFilter ) || fieldname == $filters.anotherFilter)\n      // )\n    ] | order(_createdAt desc, _id desc)\n  }\n  {\n    \"total\": count(allResults),\n    \"results\": allResults[$from..$to] {\n      \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  image,\n  \"categories\": categories[]->{\n  _id,\n  _type,\n  title,\n  \"slug\": slug.current,\n  description,\n},\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n  _id,\n  _type,\n  firstName,\n  lastName,\n  image,\n  role,\n  biography,\n  \"slug\": slug.current,\n},\n  \"wordCount\": count(string::split(coalesce(pt::text(content), ''), \" \")),\n\n    }\n  }\n": PostsArchiveQueryResult;
  }
}
